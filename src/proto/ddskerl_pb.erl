%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: file
-module(ddskerl_pb).
-compile([nowarn_missing_spec, nowarn_missing_doc]).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_IndexMapping.Interpolation'/1, 'enum_value_by_symbol_IndexMapping.Interpolation'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("ddskerl_pb.hrl").

%% enumerated types
-type 'IndexMapping.Interpolation'() :: 'NONE' | 'LINEAR' | 'QUADRATIC' | 'CUBIC'.
-export_type(['IndexMapping.Interpolation'/0]).

%% message types
-type 'DDSketch'() :: #'DDSketch'{}.

-type 'IndexMapping'() :: #'IndexMapping'{}.

-type 'Store'() :: #'Store'{}.

-export_type(['DDSketch'/0, 'IndexMapping'/0, 'Store'/0]).
-type '$msg_name'() :: 'DDSketch' | 'IndexMapping' | 'Store'.
-type '$msg'() :: 'DDSketch'() | 'IndexMapping'() | 'Store'().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'DDSketch' -> encode_msg_DDSketch(id(Msg, TrUserData), TrUserData);
        'IndexMapping' -> encode_msg_IndexMapping(id(Msg, TrUserData), TrUserData);
        'Store' -> encode_msg_Store(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_DDSketch(Msg, TrUserData) -> encode_msg_DDSketch(Msg, <<>>, TrUserData).


encode_msg_DDSketch(#'DDSketch'{mapping = F1, positiveValues = F2, negativeValues = F3, zeroCount = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true -> e_mfield_DDSketch_mapping(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= undefined -> B1;
                       true -> e_mfield_DDSketch_positiveValues(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= undefined -> B2;
                       true -> e_mfield_DDSketch_negativeValues(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= +0.0; TrF4 =:= 0 -> B3;
                  true -> e_type_double(TrF4, <<B3/binary, 33>>, TrUserData)
               end
           end
    end.

encode_msg_IndexMapping(Msg, TrUserData) -> encode_msg_IndexMapping(Msg, <<>>, TrUserData).


encode_msg_IndexMapping(#'IndexMapping'{gamma = F1, indexOffset = F2, interpolation = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= +0.0; TrF1 =:= 0 -> Bin;
                       true -> e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= +0.0; TrF2 =:= 0 -> B1;
                       true -> e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
                    end
                end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 'NONE'; TrF3 =:= 0 -> B2;
                  true -> 'e_enum_IndexMapping.Interpolation'(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

encode_msg_Store(Msg, TrUserData) -> encode_msg_Store(Msg, <<>>, TrUserData).


encode_msg_Store(#'Store'{binCounts = F1, contiguousBinCounts = F2, contiguousBinIndexOffset = F3}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = 'tr_encode_Store.binCounts'(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_Store_binCounts(TrF1, Bin, TrUserData)
             end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_Store_contiguousBinCounts(TrF2, B1, TrUserData)
             end
         end,
    if F3 == undefined -> B2;
       true ->
           begin
               TrF3 = id(F3, TrUserData),
               if TrF3 =:= 0 -> B2;
                  true -> e_type_sint(TrF3, <<B2/binary, 24>>, TrUserData)
               end
           end
    end.

e_mfield_DDSketch_mapping(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_IndexMapping(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DDSketch_positiveValues(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Store(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DDSketch_negativeValues(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Store(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Store_binCounts(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<sint32,double>'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Store_binCounts([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Store_binCounts('tr_encode_Store.binCounts[x]'(Elem, TrUserData), Bin2, TrUserData),
    e_field_Store_binCounts(Rest, Bin3, TrUserData);
e_field_Store_binCounts([], Bin, _TrUserData) -> Bin.

e_field_Store_contiguousBinCounts(Elems, Bin, TrUserData) when Elems =/= [] ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(length(Elems) * 8, Bin2),
    e_pfield_Store_contiguousBinCounts(Elems, Bin3, TrUserData);
e_field_Store_contiguousBinCounts([], Bin, _TrUserData) -> Bin.

e_pfield_Store_contiguousBinCounts([V | Rest], Bin, TrUserData) ->
    TrV = id(V, TrUserData),
    Bin2 = if is_number(TrV) -> <<Bin/binary, TrV:64/float-little>>;
              TrV =:= infinity -> <<Bin/binary, 0:48, 240, 127>>;
              TrV =:= '-infinity' -> <<Bin/binary, 0:48, 240, 255>>;
              TrV =:= nan -> <<Bin/binary, 0:48, 248, 127>>
           end,
    e_pfield_Store_contiguousBinCounts(Rest, Bin2, TrUserData);
e_pfield_Store_contiguousBinCounts([], Bin, _TrUserData) -> Bin.

'encode_msg_map<sint32,double>'(#{key := F1, value := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_sint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_double(TrF2, <<B1/binary, 17>>, TrUserData) end.

'e_enum_IndexMapping.Interpolation'('NONE', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_IndexMapping.Interpolation'('LINEAR', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_IndexMapping.Interpolation'('QUADRATIC', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_IndexMapping.Interpolation'('CUBIC', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_IndexMapping.Interpolation'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('DDSketch', Bin, TrUserData) -> id(decode_msg_DDSketch(Bin, TrUserData), TrUserData);
decode_msg_2_doit('IndexMapping', Bin, TrUserData) -> id(decode_msg_IndexMapping(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Store', Bin, TrUserData) -> id(decode_msg_Store(Bin, TrUserData), TrUserData).



decode_msg_DDSketch(Bin, TrUserData) -> dfp_read_field_def_DDSketch(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(0.0, TrUserData), TrUserData).

dfp_read_field_def_DDSketch(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_DDSketch_mapping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_DDSketch(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_DDSketch_positiveValues(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_DDSketch(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_DDSketch_negativeValues(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_DDSketch(<<33, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_DDSketch_zeroCount(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_DDSketch(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'DDSketch'{mapping = F@_1, positiveValues = F@_2, negativeValues = F@_3, zeroCount = F@_4};
dfp_read_field_def_DDSketch(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_DDSketch(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_DDSketch(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_DDSketch(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_DDSketch(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_DDSketch_mapping(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_DDSketch_positiveValues(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_DDSketch_negativeValues(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        33 -> d_field_DDSketch_zeroCount(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_DDSketch(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_DDSketch(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_DDSketch(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_DDSketch(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_DDSketch(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_DDSketch(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'DDSketch'{mapping = F@_1, positiveValues = F@_2, negativeValues = F@_3, zeroCount = F@_4}.

d_field_DDSketch_mapping(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_DDSketch_mapping(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_DDSketch_mapping(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_IndexMapping(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_DDSketch(RestF,
                                0,
                                0,
                                F,
                                if Prev == undefined -> NewFValue;
                                   true -> merge_msg_IndexMapping(Prev, NewFValue, TrUserData)
                                end,
                                F@_2,
                                F@_3,
                                F@_4,
                                TrUserData).

d_field_DDSketch_positiveValues(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_DDSketch_positiveValues(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_DDSketch_positiveValues(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Store(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_DDSketch(RestF,
                                0,
                                0,
                                F,
                                F@_1,
                                if Prev == undefined -> NewFValue;
                                   true -> merge_msg_Store(Prev, NewFValue, TrUserData)
                                end,
                                F@_3,
                                F@_4,
                                TrUserData).

d_field_DDSketch_negativeValues(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_DDSketch_negativeValues(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_DDSketch_negativeValues(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Store(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_DDSketch(RestF,
                                0,
                                0,
                                F,
                                F@_1,
                                F@_2,
                                if Prev == undefined -> NewFValue;
                                   true -> merge_msg_Store(Prev, NewFValue, TrUserData)
                                end,
                                F@_4,
                                TrUserData).

d_field_DDSketch_zeroCount(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, id(infinity, TrUserData), TrUserData);
d_field_DDSketch_zeroCount(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, id('-infinity', TrUserData), TrUserData);
d_field_DDSketch_zeroCount(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, id(nan, TrUserData), TrUserData);
d_field_DDSketch_zeroCount(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, _, TrUserData) -> dfp_read_field_def_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, id(Value, TrUserData), TrUserData).

skip_varint_DDSketch(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_DDSketch(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_DDSketch(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_DDSketch(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_DDSketch(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DDSketch(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_DDSketch(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DDSketch(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_DDSketch(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_DDSketch(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_DDSketch(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_IndexMapping(Bin, TrUserData) -> dfp_read_field_def_IndexMapping(Bin, 0, 0, 0, id(0.0, TrUserData), id(0.0, TrUserData), id('NONE', TrUserData), TrUserData).

dfp_read_field_def_IndexMapping(<<9, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_IndexMapping_gamma(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_IndexMapping(<<17, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_IndexMapping_indexOffset(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_IndexMapping(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_IndexMapping_interpolation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_IndexMapping(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'IndexMapping'{gamma = F@_1, indexOffset = F@_2, interpolation = F@_3};
dfp_read_field_def_IndexMapping(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_IndexMapping(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_IndexMapping(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_IndexMapping(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_IndexMapping(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        9 -> d_field_IndexMapping_gamma(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        17 -> d_field_IndexMapping_indexOffset(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_IndexMapping_interpolation(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_IndexMapping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_IndexMapping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_IndexMapping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_IndexMapping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_IndexMapping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_IndexMapping(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'IndexMapping'{gamma = F@_1, indexOffset = F@_2, interpolation = F@_3}.

d_field_IndexMapping_gamma(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, id(infinity, TrUserData), F@_2, F@_3, TrUserData);
d_field_IndexMapping_gamma(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, id('-infinity', TrUserData), F@_2, F@_3, TrUserData);
d_field_IndexMapping_gamma(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, id(nan, TrUserData), F@_2, F@_3, TrUserData);
d_field_IndexMapping_gamma(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, id(Value, TrUserData), F@_2, F@_3, TrUserData).

d_field_IndexMapping_indexOffset(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, F@_1, id(infinity, TrUserData), F@_3, TrUserData);
d_field_IndexMapping_indexOffset(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, F@_1, id('-infinity', TrUserData), F@_3, TrUserData);
d_field_IndexMapping_indexOffset(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, F@_1, id(nan, TrUserData), F@_3, TrUserData);
d_field_IndexMapping_indexOffset(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, F@_1, id(Value, TrUserData), F@_3, TrUserData).

d_field_IndexMapping_interpolation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_IndexMapping_interpolation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_IndexMapping_interpolation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_IndexMapping.Interpolation'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_IndexMapping(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_IndexMapping(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_IndexMapping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_IndexMapping(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_IndexMapping(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_IndexMapping(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_IndexMapping(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IndexMapping(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_IndexMapping(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_IndexMapping(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_IndexMapping(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_IndexMapping(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_IndexMapping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_Store(Bin, TrUserData) -> dfp_read_field_def_Store(Bin, 0, 0, 0, 'tr_decode_init_default_Store.binCounts'([], TrUserData), id([], TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_Store(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Store_binCounts(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Store(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_pfield_Store_contiguousBinCounts(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Store(<<17, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Store_contiguousBinCounts(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Store(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Store_contiguousBinIndexOffset(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Store(<<>>, 0, 0, _, R1, R2, F@_3, TrUserData) -> #'Store'{binCounts = 'tr_decode_repeated_finalize_Store.binCounts'(R1, TrUserData), contiguousBinCounts = lists_reverse(R2, TrUserData), contiguousBinIndexOffset = F@_3};
dfp_read_field_def_Store(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_Store(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Store(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_Store(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Store(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Store_binCounts(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_pfield_Store_contiguousBinCounts(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        17 -> d_field_Store_contiguousBinCounts(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_Store_contiguousBinIndexOffset(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Store(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_Store(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_Store(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_Store(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_Store(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Store(<<>>, 0, 0, _, R1, R2, F@_3, TrUserData) -> #'Store'{binCounts = 'tr_decode_repeated_finalize_Store.binCounts'(R1, TrUserData), contiguousBinCounts = lists_reverse(R2, TrUserData), contiguousBinIndexOffset = F@_3}.

d_field_Store_binCounts(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Store_binCounts(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Store_binCounts(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_map<sint32,double>'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Store(RestF, 0, 0, F, 'tr_decode_repeated_add_elem_Store.binCounts'(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

d_field_Store_contiguousBinCounts(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, Prev, F@_3, TrUserData) -> dfp_read_field_def_Store(Rest, Z1, Z2, F, F@_1, cons(id(infinity, TrUserData), Prev, TrUserData), F@_3, TrUserData);
d_field_Store_contiguousBinCounts(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, Prev, F@_3, TrUserData) -> dfp_read_field_def_Store(Rest, Z1, Z2, F, F@_1, cons(id('-infinity', TrUserData), Prev, TrUserData), F@_3, TrUserData);
d_field_Store_contiguousBinCounts(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, Prev, F@_3, TrUserData) -> dfp_read_field_def_Store(Rest, Z1, Z2, F, F@_1, cons(id(nan, TrUserData), Prev, TrUserData), F@_3, TrUserData);
d_field_Store_contiguousBinCounts(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, Prev, F@_3, TrUserData) -> dfp_read_field_def_Store(Rest, Z1, Z2, F, F@_1, cons(id(Value, TrUserData), Prev, TrUserData), F@_3, TrUserData).

d_pfield_Store_contiguousBinCounts(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_pfield_Store_contiguousBinCounts(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_pfield_Store_contiguousBinCounts(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_Store_contiguousBinCounts(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_Store(Rest2, 0, 0, F, F@_1, NewSeq, F@_3, TrUserData).

d_packed_field_Store_contiguousBinCounts(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_Store_contiguousBinCounts(Rest, Z1, Z2, F, cons(id(infinity, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_Store_contiguousBinCounts(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_Store_contiguousBinCounts(Rest, Z1, Z2, F, cons(id('-infinity', TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_Store_contiguousBinCounts(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_Store_contiguousBinCounts(Rest, Z1, Z2, F, cons(id(nan, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_Store_contiguousBinCounts(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_Store_contiguousBinCounts(Rest, Z1, Z2, F, cons(id(Value, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_Store_contiguousBinCounts(<<>>, _, _, _, AccSeq, _) -> AccSeq.

d_field_Store_contiguousBinIndexOffset(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Store_contiguousBinIndexOffset(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Store_contiguousBinIndexOffset(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = (X bsl N + Acc) band 4294967295,
                              if ZValue band 1 =:= 0 -> id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    dfp_read_field_def_Store(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_Store(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_Store(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_Store(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Store(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Store(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_Store(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Store(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Store(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_Store(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Store(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_Store(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Store(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_Store(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Store(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_map<sint32,double>'(Bin, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Bin, 0, 0, 0, id(0, TrUserData), id(0.0, TrUserData), TrUserData).

'dfp_read_field_def_map<sint32,double>'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<sint32,double>_key'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<sint32,double>'(<<17, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_map<sint32,double>_value'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<sint32,double>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<sint32,double>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_map<sint32,double>'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<sint32,double>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_map<sint32,double>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<sint32,double>'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_map<sint32,double>_key'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        17 -> 'd_field_map<sint32,double>_value'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_map<sint32,double>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_map<sint32,double>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_map<sint32,double>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_map<sint32,double>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_map<sint32,double>'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_map<sint32,double>'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{key => F@_1, value => F@_2}.

'd_field_map<sint32,double>_key'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_map<sint32,double>_key'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_map<sint32,double>_key'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
                              ZValue = (X bsl N + Acc) band 4294967295,
                              if ZValue band 1 =:= 0 -> id(ZValue bsr 1, TrUserData);
                                 true -> id(-(ZValue + 1 bsr 1), TrUserData)
                              end
                          end,
                          Rest},
    'dfp_read_field_def_map<sint32,double>'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_map<sint32,double>_value'(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, id(infinity, TrUserData), TrUserData);
'd_field_map<sint32,double>_value'(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, id('-infinity', TrUserData), TrUserData);
'd_field_map<sint32,double>_value'(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, id(nan, TrUserData), TrUserData);
'd_field_map<sint32,double>_value'(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, id(Value, TrUserData), TrUserData).

'skip_varint_map<sint32,double>'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_map<sint32,double>'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<sint32,double>'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_map<sint32,double>'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_map<sint32,double>'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<sint32,double>'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_map<sint32,double>'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<sint32,double>'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_map<sint32,double>'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_map<sint32,double>'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_map<sint32,double>'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'd_enum_IndexMapping.Interpolation'(0) -> 'NONE';
'd_enum_IndexMapping.Interpolation'(1) -> 'LINEAR';
'd_enum_IndexMapping.Interpolation'(2) -> 'QUADRATIC';
'd_enum_IndexMapping.Interpolation'(3) -> 'CUBIC';
'd_enum_IndexMapping.Interpolation'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'DDSketch' -> merge_msg_DDSketch(Prev, New, TrUserData);
        'IndexMapping' -> merge_msg_IndexMapping(Prev, New, TrUserData);
        'Store' -> merge_msg_Store(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_DDSketch/3}).
merge_msg_DDSketch(#'DDSketch'{mapping = PFmapping, positiveValues = PFpositiveValues, negativeValues = PFnegativeValues, zeroCount = PFzeroCount},
                   #'DDSketch'{mapping = NFmapping, positiveValues = NFpositiveValues, negativeValues = NFnegativeValues, zeroCount = NFzeroCount}, TrUserData) ->
    #'DDSketch'{mapping =
                    if PFmapping /= undefined, NFmapping /= undefined -> merge_msg_IndexMapping(PFmapping, NFmapping, TrUserData);
                       PFmapping == undefined -> NFmapping;
                       NFmapping == undefined -> PFmapping
                    end,
                positiveValues =
                    if PFpositiveValues /= undefined, NFpositiveValues /= undefined -> merge_msg_Store(PFpositiveValues, NFpositiveValues, TrUserData);
                       PFpositiveValues == undefined -> NFpositiveValues;
                       NFpositiveValues == undefined -> PFpositiveValues
                    end,
                negativeValues =
                    if PFnegativeValues /= undefined, NFnegativeValues /= undefined -> merge_msg_Store(PFnegativeValues, NFnegativeValues, TrUserData);
                       PFnegativeValues == undefined -> NFnegativeValues;
                       NFnegativeValues == undefined -> PFnegativeValues
                    end,
                zeroCount =
                    if NFzeroCount =:= undefined -> PFzeroCount;
                       true -> NFzeroCount
                    end}.

-compile({nowarn_unused_function,merge_msg_IndexMapping/3}).
merge_msg_IndexMapping(#'IndexMapping'{gamma = PFgamma, indexOffset = PFindexOffset, interpolation = PFinterpolation}, #'IndexMapping'{gamma = NFgamma, indexOffset = NFindexOffset, interpolation = NFinterpolation}, _) ->
    #'IndexMapping'{gamma =
                        if NFgamma =:= undefined -> PFgamma;
                           true -> NFgamma
                        end,
                    indexOffset =
                        if NFindexOffset =:= undefined -> PFindexOffset;
                           true -> NFindexOffset
                        end,
                    interpolation =
                        if NFinterpolation =:= undefined -> PFinterpolation;
                           true -> NFinterpolation
                        end}.

-compile({nowarn_unused_function,merge_msg_Store/3}).
merge_msg_Store(#'Store'{binCounts = PFbinCounts, contiguousBinCounts = PFcontiguousBinCounts, contiguousBinIndexOffset = PFcontiguousBinIndexOffset},
                #'Store'{binCounts = NFbinCounts, contiguousBinCounts = NFcontiguousBinCounts, contiguousBinIndexOffset = NFcontiguousBinIndexOffset}, TrUserData) ->
    #'Store'{binCounts =
                 if PFbinCounts /= undefined, NFbinCounts /= undefined -> 'tr_merge_Store.binCounts'(PFbinCounts, NFbinCounts, TrUserData);
                    PFbinCounts == undefined -> NFbinCounts;
                    NFbinCounts == undefined -> PFbinCounts
                 end,
             contiguousBinCounts =
                 if PFcontiguousBinCounts /= undefined, NFcontiguousBinCounts /= undefined -> 'erlang_++'(PFcontiguousBinCounts, NFcontiguousBinCounts, TrUserData);
                    PFcontiguousBinCounts == undefined -> NFcontiguousBinCounts;
                    NFcontiguousBinCounts == undefined -> PFcontiguousBinCounts
                 end,
             contiguousBinIndexOffset =
                 if NFcontiguousBinIndexOffset =:= undefined -> PFcontiguousBinIndexOffset;
                    true -> NFcontiguousBinIndexOffset
                 end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'DDSketch' -> v_msg_DDSketch(Msg, [MsgName], TrUserData);
        'IndexMapping' -> v_msg_IndexMapping(Msg, [MsgName], TrUserData);
        'Store' -> v_msg_Store(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_DDSketch/3}).
-dialyzer({nowarn_function,v_msg_DDSketch/3}).
v_msg_DDSketch(#'DDSketch'{mapping = F1, positiveValues = F2, negativeValues = F3, zeroCount = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_submsg_IndexMapping(F1, [mapping | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_submsg_Store(F2, [positiveValues | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_submsg_Store(F3, [negativeValues | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [zeroCount | Path], TrUserData)
    end,
    ok;
v_msg_DDSketch(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'DDSketch'}, X, Path).

-compile({nowarn_unused_function,v_submsg_IndexMapping/3}).
-dialyzer({nowarn_function,v_submsg_IndexMapping/3}).
v_submsg_IndexMapping(Msg, Path, TrUserData) -> v_msg_IndexMapping(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_IndexMapping/3}).
-dialyzer({nowarn_function,v_msg_IndexMapping/3}).
v_msg_IndexMapping(#'IndexMapping'{gamma = F1, indexOffset = F2, interpolation = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [gamma | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_double(F2, [indexOffset | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> 'v_enum_IndexMapping.Interpolation'(F3, [interpolation | Path], TrUserData)
    end,
    ok;
v_msg_IndexMapping(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'IndexMapping'}, X, Path).

-compile({nowarn_unused_function,v_submsg_Store/3}).
-dialyzer({nowarn_function,v_submsg_Store/3}).
v_submsg_Store(Msg, Path, TrUserData) -> v_msg_Store(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_Store/3}).
-dialyzer({nowarn_function,v_msg_Store/3}).
v_msg_Store(#'Store'{binCounts = F1, contiguousBinCounts = F2, contiguousBinIndexOffset = F3}, Path, TrUserData) ->
    'v_map<sint32,double>'(F1, [binCounts | Path], TrUserData),
    if is_list(F2) ->
           _ = [v_type_double(Elem, [contiguousBinCounts | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, double}, F2, [contiguousBinCounts | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_sint32(F3, [contiguousBinIndexOffset | Path], TrUserData)
    end,
    ok;
v_msg_Store(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Store'}, X, Path).

-compile({nowarn_unused_function,'v_enum_IndexMapping.Interpolation'/3}).
-dialyzer({nowarn_function,'v_enum_IndexMapping.Interpolation'/3}).
'v_enum_IndexMapping.Interpolation'('NONE', _Path, _TrUserData) -> ok;
'v_enum_IndexMapping.Interpolation'('LINEAR', _Path, _TrUserData) -> ok;
'v_enum_IndexMapping.Interpolation'('QUADRATIC', _Path, _TrUserData) -> ok;
'v_enum_IndexMapping.Interpolation'('CUBIC', _Path, _TrUserData) -> ok;
'v_enum_IndexMapping.Interpolation'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_IndexMapping.Interpolation'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'IndexMapping.Interpolation'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData) when is_integer(N), -2147483648 =< N, N =< 2147483647 -> ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, sint32, signed, 32}, N, Path);
v_type_sint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, sint32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,'v_map<sint32,double>'/3}).
-dialyzer({nowarn_function,'v_map<sint32,double>'/3}).
'v_map<sint32,double>'(M, Path, TrUserData) when is_map(M) ->
    [begin v_type_sint32(Key, [key | Path], TrUserData), v_type_double(Value, [value | Path], TrUserData) end || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<sint32,double>'(X, Path, _TrUserData) -> mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_Store.binCounts'/2}).
'tr_decode_init_default_Store.binCounts'(_, _) -> mt_empty_map_m().

-compile({inline,'tr_merge_Store.binCounts'/3}).
'tr_merge_Store.binCounts'(X1, X2, _) -> mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Store.binCounts'/2}).
'tr_decode_repeated_finalize_Store.binCounts'(L, TrUserData) -> id(L, TrUserData).

-compile({inline,'tr_encode_Store.binCounts'/2}).
'tr_encode_Store.binCounts'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_Store.binCounts'/3}).
'tr_decode_repeated_add_elem_Store.binCounts'(Elem, L, _) -> mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_Store.binCounts[x]'/2}).
'tr_encode_Store.binCounts[x]'(X, _) -> mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) -> #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).




get_msg_defs() ->
    [{{enum, 'IndexMapping.Interpolation'}, [{'NONE', 0}, {'LINEAR', 1}, {'QUADRATIC', 2}, {'CUBIC', 3}]},
     {{msg, 'DDSketch'},
      [#{name => mapping, fnum => 1, rnum => 2, type => {msg, 'IndexMapping'}, occurrence => optional, opts => []},
       #{name => positiveValues, fnum => 2, rnum => 3, type => {msg, 'Store'}, occurrence => optional, opts => []},
       #{name => negativeValues, fnum => 3, rnum => 4, type => {msg, 'Store'}, occurrence => optional, opts => []},
       #{name => zeroCount, fnum => 4, rnum => 5, type => double, occurrence => optional, opts => []}]},
     {{msg, 'IndexMapping'},
      [#{name => gamma, fnum => 1, rnum => 2, type => double, occurrence => optional, opts => []},
       #{name => indexOffset, fnum => 2, rnum => 3, type => double, occurrence => optional, opts => []},
       #{name => interpolation, fnum => 3, rnum => 4, type => {enum, 'IndexMapping.Interpolation'}, occurrence => optional, opts => []}]},
     {{msg, 'Store'},
      [#{name => binCounts, fnum => 1, rnum => 2, type => {map, sint32, double}, occurrence => repeated, opts => []},
       #{name => contiguousBinCounts, fnum => 2, rnum => 3, type => double, occurrence => repeated, opts => [packed]},
       #{name => contiguousBinIndexOffset, fnum => 3, rnum => 4, type => sint32, occurrence => optional, opts => []}]}].


get_msg_names() -> ['DDSketch', 'IndexMapping', 'Store'].


get_group_names() -> [].


get_msg_or_group_names() -> ['DDSketch', 'IndexMapping', 'Store'].


get_enum_names() -> ['IndexMapping.Interpolation'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('DDSketch') ->
    [#{name => mapping, fnum => 1, rnum => 2, type => {msg, 'IndexMapping'}, occurrence => optional, opts => []},
     #{name => positiveValues, fnum => 2, rnum => 3, type => {msg, 'Store'}, occurrence => optional, opts => []},
     #{name => negativeValues, fnum => 3, rnum => 4, type => {msg, 'Store'}, occurrence => optional, opts => []},
     #{name => zeroCount, fnum => 4, rnum => 5, type => double, occurrence => optional, opts => []}];
find_msg_def('IndexMapping') ->
    [#{name => gamma, fnum => 1, rnum => 2, type => double, occurrence => optional, opts => []},
     #{name => indexOffset, fnum => 2, rnum => 3, type => double, occurrence => optional, opts => []},
     #{name => interpolation, fnum => 3, rnum => 4, type => {enum, 'IndexMapping.Interpolation'}, occurrence => optional, opts => []}];
find_msg_def('Store') ->
    [#{name => binCounts, fnum => 1, rnum => 2, type => {map, sint32, double}, occurrence => repeated, opts => []},
     #{name => contiguousBinCounts, fnum => 2, rnum => 3, type => double, occurrence => repeated, opts => [packed]},
     #{name => contiguousBinIndexOffset, fnum => 3, rnum => 4, type => sint32, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('IndexMapping.Interpolation') -> [{'NONE', 0}, {'LINEAR', 1}, {'QUADRATIC', 2}, {'CUBIC', 3}];
find_enum_def(_) -> error.


enum_symbol_by_value('IndexMapping.Interpolation', Value) -> 'enum_symbol_by_value_IndexMapping.Interpolation'(Value).


enum_value_by_symbol('IndexMapping.Interpolation', Sym) -> 'enum_value_by_symbol_IndexMapping.Interpolation'(Sym).


'enum_symbol_by_value_IndexMapping.Interpolation'(0) -> 'NONE';
'enum_symbol_by_value_IndexMapping.Interpolation'(1) -> 'LINEAR';
'enum_symbol_by_value_IndexMapping.Interpolation'(2) -> 'QUADRATIC';
'enum_symbol_by_value_IndexMapping.Interpolation'(3) -> 'CUBIC'.


'enum_value_by_symbol_IndexMapping.Interpolation'('NONE') -> 0;
'enum_value_by_symbol_IndexMapping.Interpolation'('LINEAR') -> 1;
'enum_value_by_symbol_IndexMapping.Interpolation'('QUADRATIC') -> 2;
'enum_value_by_symbol_IndexMapping.Interpolation'('CUBIC') -> 3.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"DDSketch">>) -> 'DDSketch';
fqbin_to_msg_name(<<"IndexMapping">>) -> 'IndexMapping';
fqbin_to_msg_name(<<"Store">>) -> 'Store';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('DDSketch') -> <<"DDSketch">>;
msg_name_to_fqbin('IndexMapping') -> <<"IndexMapping">>;
msg_name_to_fqbin('Store') -> <<"Store">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"IndexMapping.Interpolation">>) -> 'IndexMapping.Interpolation';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('IndexMapping.Interpolation') -> <<"IndexMapping.Interpolation">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "ddskerl.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["ddskerl.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["ddskerl"].


get_msg_containment("ddskerl") -> ['DDSketch', 'IndexMapping', 'Store'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("ddskerl") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("ddskerl") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("ddskerl") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("ddskerl") -> ['IndexMapping.Interpolation'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"Store">>) -> "ddskerl";
get_proto_by_msg_name_as_fqbin(<<"IndexMapping">>) -> "ddskerl";
get_proto_by_msg_name_as_fqbin(<<"DDSketch">>) -> "ddskerl";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"IndexMapping.Interpolation">>) -> "ddskerl";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "file".
